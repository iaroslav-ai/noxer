"""
Sequential generator model - sample the outputs vector
iteratively entry by entry.

For an output vector of size n, n models are trained.
First model learns the distribution of first entry in
output vector.
Second model learns the distribution of second entry,
conditioned on first one.
Thirs model learns the distribution of third entry,
conditioned on first and second ones.
...
"""
import numpy as np

from sklearn.base import clone

from .base import GeneratorBase

class SGM(GeneratorBase):



    def __init__(self, estimator):
        self.estimator = estimator

    def fit(self, X, Y, **kwargs):
        """Fit generative models to the data

        Parameters
        ----------
        Y : {array-like, sparse matrix}, shape [n_samples, n_output_features]
            The data that should be generated by particular model.

        X : {array-like, sparse matrix}, shape [n_samples, n_features]
            The data used to condition the generative model's outputs.
        """

        # all inputs to the model
        Cond_list = [X]

        for c in Y.T:
            # last feature is always the output

            m, M = np.min(c), np.max(c)

            # "real" data
            C = [np.column_stack(Cond_list + [c])]
            y = [np.ones_like(c)]





