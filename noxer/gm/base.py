"""
Interfaces and general functionality for generative
models, such as a score function.
"""

from sklearn.base import BaseEstimator, TransformerMixin
from noxer.sequences import FlattenShape
from .metrics import condidional_similarity
from sklearn.preprocessing import StandardScaler


class GeneratorBase(BaseEstimator):
    def fit(self, X, Y, **kwargs):
        """Fit generative model to the data.

        Parameters
        ----------
        Y : {array-like, sparse matrix}, shape [n_samples, ...]
            The data that should be generated by particular model.

        X : {array-like, sparse matrix}, shape [n_samples, ...]
            The data used to condition the generative model's outputs.
        """
        raise NotImplementedError("Please implement a fit method for your model.")

    def predict(self, X, **kwargs):
        """Make estimations with generative model.

        Parameters
        ----------
        X : {array-like, sparse matrix}, shape [n_samples, ...]
            The data used to condition the generative model's outputs.

        Returns
        -------
        Y : {array-like, sparse matrix}, shape [n_samples, ...]
            The data that is generated by a generative model.

        """
        raise NotImplementedError("Please implement a fit method for your model.")

    def score(self, X, Y, **kwargs):
        """Score the generative model on the real data.

        Parameters
        ----------
        Y : {array-like, sparse matrix}, shape [n_samples, ...]
            The data that should be generated by particular model.

        X : {array-like, sparse matrix}, shape [n_samples, ...]
            The data used to condition the generative model's outputs.
        """
        Yp = self.predict(X, **kwargs)
        score = condidional_similarity(Y, Yp, C_true=X, C_pred=X, cross_testing=True)
        return score